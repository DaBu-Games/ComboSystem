@startuml

interface ICommand
{
+void execute();
+AttackValues GetValues(); 
}

class AttackValues
{
- float cooldown;
- AttackType attackType;
- string animation; 
}

enum AttackType
{
normal,
speciale,
}

class CommandHistory
{
-Combos comboHistory;
-Combos setCombos;
+ void addCombo(Combo combo);
+ void ResetHistory();
+ ICommand CheckForCombo();
}

class NormaleAttackCommand
{
- AttackValues attackValues;
}

class Combos
{
-List<Combo> combos; 
}

class Combo
{
-string name;
-List<Attack> attacks;
-ICommand Execute;
-int dmg;
}

class Attack
{
IState state;
AttackType attackType; 
}

class StateMachine
{
- IState currentState;
- List<IState> allStates;
- List<Transitions> transitions;
+ void OnUpdate();
+ void AddState(IState state);
+ void RemoveState(IState state);
+ void SwitchState(Istate state);
}

abstract BaseState<T>
{
# T StateMachine; 
BaseState(T stateMachine);
void OnUpdate();
void OnEnterState();
void OnExitState();
}

interface IState
{
void OnUpdate();
void OnEnterState();
void OnExitState(); 
}

class Transition
{
- IState fromState;
- IState toState;
- System.func<bool> condition;
+ Transiton(fromState, toState, condition);
+ bool CheckCondition(); 
}

class CoolDownManager {
    -float timer
    -float cooldownDuration
    +void StartCooldown(float duration)
    +void Update(float deltaTime)
    +bool IsOnCooldown()
}

class InputManager
{
- dictionairy <IState, dictionairy<AttackType, ICommand>> allInputBindings;
- dictionairy<AttackType, ICommand> currentInputBindings;
- IState currentState; 
+ void AddBinding(IStatet state, AttackType attackType, ICommand command)
+ void switchState(IState state);
- void ChangeInputBindings(); 
+ void HandleInput(AttackType attackType); 
}

class GameManager
{
StateMachine stateMachine;
CoolDownManager coolDownManager;
CommandHistory commandHistory; 
InputManager inputManager; 
- void update(); 
}

class IdleState
{
}

class AirState
{
}

class MovingState
{
}

BaseState --> AirState
BaseState --> MovingState
BaseState --> IdleState
GameManager ..* StateMachine
ICommand --> NormaleAttackCommand
CommandHistory ..* Combos
BaseState ..* StateMachine
GameManager ..* CommandHistory 
GameManager ..* CoolDownManager
Combos ..* Combo
Combo ..* ICommand
Combo ..* Attack
Attack ..* AttackType
NormaleAttackCommand ..* AttackValues
Transition ..* IState
StateMachine ..* Transition
StateMachine ..* IState
GameManager ..* InputManager

@enduml